This is a mirror of http://www.vim.org/scripts/script.php?script_id=2544

DESCRIPTION
Files edited in Vim often relate to one another; maybe they just differ in
file extensions, are numbered sequentially, or contain common patterns. One
can use the built-in cmdline-completion or filename-modifiers like %:r to
quickly edit a similar file, or even use special plugins, e.g. to alternate
between source and header files (vimscript #31).

This plugin provides custom versions of the :edit, :view, :split, :vsplit,
:sview, :file, :write and :saveas commands which facilitate quick and simple
editing of similarly named files. To quickly edit another file based on the
current file, one can:
- substitute {old} with {new}
- go to previous/next numbered file or add any offset to the number
- go to succeeding / preceding files in the same directory
- change the file extension
To open a set of similar files, it is possible to:
- open all files matching a pattern in split windows

SEE ALSO
- The PatternsOnText.vim plugin (vimscript #4602) applies the
  {text}={replacement} of :EditSubstitute via :substitute to the text in the
  buffer with :SubstituteWildcard.

RELATED WORKS
- altr (vimscript #4202) lets you set up custom (per-filetype) rules and then
  opens related files through two forward / backward mappings, e.g. allowing
  you to open the autoload file from the plugin.
- nextfile (vimscript #4698) has definitions of related files (like Rails
  controllers, views, model, tests), and can edit a next file via a mapping.
- projectile (https://github.com/tpope/vim-projectile) allows you to define
  per-project settings and navigation commands, e.g. :Eplugin and :Edoc.

USAGE
Substitutions: Change all occurrences via {text}={replacement} in the
currently edited file (modeled after the Korn shell's "cd {old} {new}"
command). This can also be achieved with the built-in filename-modifiers:
    :edit %:gs?pattern?replacement?
but the syntax is difficult to memorize (it's subtly different from :s) and
harder to type (because one has to use regular expressions instead of the
simpler file wildcards).

:EditSubstitute[!] {text}={replacement} [{text}={replacement} [...]]
:ViewSubstitute[!] {text}={replacement} [{text}={replacement} [...]]
:SplitSubstitute[!] {text}={replacement} [{text}={replacement} [...]]
:VSplitSubstitute[!] {text}={replacement} [{text}={replacement} [...]]
:SViewSubstitute[!] {text}={replacement} [{text}={replacement} [...]]
:DiffSplitSubstitute[!] {text}={replacement} [{text}={replacement} [...]]
:FileSubstitute {text}={replacement} [{text}={replacement} [...]]
:[range]WriteSubstitute[!] {text}={replacement} [{text}={replacement} [...]]
:SaveSubstitute[!] {text}={replacement} [{text}={replacement} [...]]
:BDeleteSubstitute[!] {text}={replacement} [{text}={replacement} [...]]

Plus / Minus: Add an offset to the last (decimal) number in the currently
edited file.
:[N]EditPlus[!] [N]
:[N]EditMinus[!] [N]
:...

Next / Previous: In the directory listing of the current file, go to
succeeding / preceding file entries.
:[N]EditNext [{filelist}]
:[N]EditPrevious [{filelist}]
:...

Root: Change the file extension in the currently edited file.
This is an enhanced version of the built-in:
    :edit %:r.{extension}

:EditRoot[!] {extension}
:...

Pattern: Open all files matching the pattern in split windows, similar to how
 :argadd {name} adds all matching files to the argument list.

:SplitPattern [++opt] [+cmd] {file-pattern} [{file-pattern} ...]
:...
